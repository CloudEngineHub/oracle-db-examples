/* Create user */
create user <username> identified by "<password>";

/* Grant PRIVILEGES to <username>*/
    GRANT execute on DBMS_AQ to <username>;
    GRANT RESOURCE TO <username>;
    GRANT CONNECT TO <username>;
    GRANT EXECUTE ANY PROCEDURE TO <username>;
    GRANT aq_user_role TO <username>;
    GRANT EXECUTE ON dbms_aqadm TO <username>;
    GRANT EXECUTE ON dbms_aq TO <username> ;
    GRANT EXECUTE ON dbms_aqin TO <username>;
    GRANT UNLIMITED TABLESPACE TO <username>;

/* Drop user*/
    DROP USER "<username>" cascade;

/* 1. Creating a message type */
        CREATE type Message_typ as object (
        subject     VARCHAR2(30),
        text        VARCHAR2(80));  

/* 2. Creating an OBJECT type Queue Table and Queue */
        EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE (queue_table     => 'objType_classicQueueTable',     queue_payload_type => 'Message_typ');
        EXECUTE DBMS_AQADM.CREATE_QUEUE (queue_name            => 'objType_classicQueue',          queue_table        => 'objType_classicQueueTable');
        EXECUTE DBMS_AQADM.START_QUEUE (queue_name             => 'objType_classicQueue');

/* 3. Creating a RAW type queue table and queue */
        EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE ( queue_table    => 'rawType_classicQueueTable',     queue_payload_type  => 'RAW');   
        EXECUTE DBMS_AQADM.CREATE_QUEUE ( queue_name           => 'rawType_classicQueue',          queue_table         => 'rawType_classicQueueTable');  
        EXECUTE DBMS_AQADM.START_QUEUE ( queue_name            => 'rawType_classicQueue'); 

/* 4. Creating a JSON type queue table and queue */
        EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE ( queue_table    => 'jsonType_classicQueueTable',     queue_payload_type   => 'JSON');  
        EXECUTE DBMS_AQADM.CREATE_QUEUE ( queue_name           => 'jsonType_classicQueue',          queue_table         => 'jsonType_classicQueueTable');   
        EXECUTE DBMS_AQADM.START_QUEUE ( queue_name            => 'jsonType_classicQueue');

/* 5. Creating a Prioritized Message Queue Table and Queue */
        EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE (queue_table     => 'priority_msg', sort_list          => 'PRIORITY,ENQ_TIME', queue_payload_type => 'Message_typ');
        EXECUTE DBMS_AQADM.CREATE_QUEUE (queue_name            => 'priority_msg_queue', queue_table        => 'priority_msg');
        EXECUTE DBMS_AQADM.START_QUEUE ( queue_name            => 'priority_msg_queue');

/* 6. Creating a Multiconsumer Queue Table and Queue */
        EXECUTE DBMS_AQADM.CREATE_QUEUE_TABLE (queue_table     => 'priorityType_classicQueueTable', sort_list  => 'PRIORITY,ENQ_TIME', queue_payload_type => 'Message_typ');

/* 7. Creating a Queue to Demonstrate Propagation */
        EXECUTE DBMS_AQADM.CREATE_QUEUE (queue_name            => 'multiconsumer_classicQueue2',queue_table       => 'multiconsumer_classicQueueTable');
        EXECUTE DBMS_AQADM.START_QUEUE (queue_name             => 'multiconsumer_classicQueue2');



/* -----------------Enqueuing and Dequeuing of Object Type Messages Using PL/SQL--------------------------------	*/

/* 1. Enqueue to objType Message */
        DECLARE
        enqueue_options     dbms_aq.enqueue_options_t;
        message_properties  dbms_aq.message_properties_t;
        message_handle      RAW(16);
        message             message_typ;

        BEGIN
        message := message_typ('NORMAL MESSAGE','enqueued to msg_queue first.');

        dbms_aq.enqueue(queue_name => 'objType_classicQueue',           
                enqueue_options      => enqueue_options,       
                message_properties   => message_properties,     
                payload              => message,               
                msgid                => message_handle);

        COMMIT;
        END;

/* 2. Dequeue from objType Message */
        DECLARE
        dequeue_options     dbms_aq.dequeue_options_t;
        message_properties  dbms_aq.message_properties_t;
        message_handle      RAW(16);
        message             message_typ;

        BEGIN
        DBMS_AQ.DEQUEUE(queue_name => 'objType_classicQueue',
                dequeue_options    => dequeue_options,
                message_properties => message_properties,
                payload            => message,
                msgid              => message_handle);

        DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject ||
                                            ' ... ' || message.text );
        COMMIT;
        END;

/* 3. Enqueue to RAW Type Messages */
        DECLARE 
        enqueue_options     dbms_aq.enqueue_options_t; 
        message_properties  dbms_aq.message_properties_t; 
        message_handle      RAW(16); 
        message             RAW(4096); 
        
        BEGIN 
        message :=  HEXTORAW(RPAD('FF',4095,'FF')); 
        DBMS_AQ.ENQUEUE(queue_name => 'rawType_classicQueue',            
                enqueue_options    => enqueue_options,        
                message_properties => message_properties,      
                            payload  => message,                
                            msgid   => message_handle); 
        COMMIT; 
        END; 

/* 4. Dequeue from RAW Type Messages */ 
        DECLARE 
        dequeue_options     DBMS_AQ.dequeue_options_t; 
        message_properties  DBMS_AQ.message_properties_t; 
        message_handle      RAW(16); 
        message             RAW(4096); 
        
        BEGIN 
        DBMS_AQ.DEQUEUE(queue_name => 'rawType_classicQueue', 
                dequeue_options    => dequeue_options, 
                message_properties => message_properties, 
                payload            => message, 
                msgid              => message_handle); 
        COMMIT; 
        END;

/* 5. Enqueue to Messages by Priority Using PL/SQL	*/
        DECLARE
        enqueue_options     dbms_aq.enqueue_options_t;
        message_properties  dbms_aq.message_properties_t;
        message_handle      RAW(16);
        message             message_typ;

        BEGIN
        message := message_typ('PRIORITY MESSAGE','enqued at priority 30.');
        message_properties.priority := 30;

        DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE_PRIORITIZED',
                enqueue_options    => enqueue_options,
                message_properties => message_properties,
                payload            => message,
                msgid              => message_handle);

        message := message_typ('PRIORITY MESSAGE','Enqueued at priority 5.');
        message_properties.priority := 5;

        DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE_PRIORITIZED',
                enqueue_options    => enqueue_options,
                message_properties => message_properties,
                payload            => message,
                msgid              => message_handle);
        END;

/* 6. Dequeue from priority queue: */
        DECLARE
        dequeue_options     DBMS_AQ.dequeue_options_t;
        message_properties  DBMS_AQ.message_properties_t;
        message_handle      RAW(16);
        message             message_typ;

        BEGIN
        DBMS_AQ.DEQUEUE(queue_name  => 'AQ_QUEUE_PRIORITIZED',
                dequeue_options       => dequeue_options,
                message_properties    => message_properties,
                payload               => message,
                msgid                 => message_handle);

        DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject || ' ... ' || message.text );
        COMMIT;

        DBMS_AQ.DEQUEUE(queue_name => 'AQ_QUEUE_PRIORITIZED',
                dequeue_options      => dequeue_options,
                message_properties   => message_properties,
                payload              => message,
                msgid                => message_handle);

        DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject ||' ... ' || message.text );
        COMMIT;
        END;

/* 7. Dequeue of messages after Preview by Criterion */
    /* 7.1. Enqueue of ObjectType Messages 
            DECLARE
            enqueue_options     DBMS_AQ.enqueue_options_t;
            message_properties  DBMS_AQ.message_properties_t;
            message_handle      RAW(16);
            message             message_typ;

            BEGIN
            message := message_typ('GREEN','GREEN enqueued to AQ_QUEUE first.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            message := message_typ('GREEN','GREEN also enqueued to AQ_QUEUE second.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            message := message_typ('YELLOW','YELLOW enqueued to AQ_QUEUE third.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            DBMS_OUTPUT.PUT_LINE ('Message handle: ' || message_handle);

            message := message_typ('VIOLET','VIOLET enqueued to AQ_QUEUE fourth.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            message := message_typ('BLUE','BLUE enqueued to AQ_QUEUE fifth.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            message := message_typ('RED','RED enqueued to AQ_QUEUE sixth.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE',           
                    enqueue_options      => enqueue_options,       
                    message_properties   => message_properties,     
                    payload              => message,               
                    msgid                => message_handle);

            COMMIT;
            END;

    /* 7.2. Dequeue in BROWSE mode until RED is found, and remove RED from queue: */
            DECLARE
            dequeue_options     DBMS_AQ.dequeue_options_t;
            message_properties  DBMS_AQ.message_properties_t;
            message_handle      RAW(16);
            message             message_typ;

            BEGIN
            dequeue_options.dequeue_mode := DBMS_AQ.BROWSE;
            LOOP
                DBMS_AQ.DEQUEUE(queue_name          => 'AQ_QUEUE',
                                dequeue_options    => dequeue_options,
                                message_properties => message_properties,
                                payload            => message,
                                msgid              => message_handle);

                DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject ||' ... ' || message.text );  
                EXIT WHEN message.subject = 'RED';
            END LOOP;

            dequeue_options.dequeue_mode := DBMS_AQ.REMOVE;
            dequeue_options.msgid        := message_handle;
            DBMS_AQ.DEQUEUE(
                    queue_name => 'AQ_QUEUE',
                    dequeue_options    => dequeue_options,
                    message_properties => message_properties,
                    payload            => message,
                    msgid              => message_handle);
            DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject ||' ... ' || message.text );
            COMMIT;
            END;

    /* 7.3. Dequeue in LOCKED mode until BLUE is found, and remove BLUE from queue: */
            DECLARE
            dequeue_options     dbms_aq.dequeue_options_t;
            message_properties  dbms_aq.message_properties_t;
            message_handle      RAW(16);
            message             message_typ;

            BEGIN
            dequeue_options.dequeue_mode := dbms_aq.LOCKED;
            LOOP
                dbms_aq.dequeue(queue_name => 'AQ_QUEUE',
                            dequeue_options    => dequeue_options,
                            message_properties => message_properties,
                            payload            => message,
                            msgid              => message_handle);
                dbms_output.put_line ('Message: ' || message.subject ||' ... ' || message.text );        
                EXIT WHEN message.subject = 'BLUE';
            END LOOP;

            dequeue_options.dequeue_mode := dbms_aq.REMOVE;
            dequeue_options.msgid        := message_handle;
            dbms_aq.dequeue(
                queue_name => 'AQ_QUEUE',
                dequeue_options      => dequeue_options,
                message_properties   => message_properties,
                payload              => message,
                msgid => message_handle);
            DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject ||' ... ' || message.text );
            COMMIT;
            END;

/* 8. Enqueuing and Dequeuing of Messages with Time Delay and Expiration Using PL/SQL	
        DECLARE
        enqueue_options     dbms_aq.enqueue_options_t;
        message_properties  dbms_aq.message_properties_t;
        message_handle      RAW(16);
        message             Message_typ;

        BEGIN
        message := Message_typ('DELAYED', 'This message is delayed one week.');
        message_properties.delay := 7*24*60*60;
        message_properties.expiration := 2*7*24*60*60;

        dbms_aq.enqueue(
            queue_name => 'AQ_QUEUE',
            enqueue_options      => enqueue_options,
            message_properties   => message_properties,
            payload            => message,
            msgid              => message_handle);
        COMMIT;
        END;

/* 9. Enqueuing and Dequeuing of Messages Using Message Grouping Using PL/SQL	*/
    /* 9.1. Create Queue table and queue */
            BEGIN 
            DBMS_AQADM.CREATE_QUEUE_TABLE ( 
                queue_table          => 'msggroup',
                queue_payload_type   => 'message_typ',
                message_grouping     => DBMS_AQADM.TRANSACTIONAL);

            DBMS_AQADM.CREATE_QUEUE(
                queue_name      => 'msggroup_queue',
                queue_table     => 'msggroup');

            DBMS_AQADM.START_QUEUE(queue_name => 'msggroup_queue');
            END;
    /* 9.2 Enqueue three messages in each transaction */
            DECLARE
            enqueue_options     DBMS_AQ.enqueue_options_t;
            message_properties  DBMS_AQ.message_properties_t;
            message_handle      RAW(16);
            message             message_typ;

            BEGIN

            /* Loop through three times, committing after every iteration */
            FOR txnno in 1..3 LOOP

            /* Loop through three times, enqueuing each iteration */
                FOR mesgno in 1..3 LOOP
                message := message_typ('GROUP#' || txnno, 'Message#' || mesgno ||  ' in group' || txnno);

                DBMS_AQ.ENQUEUE(queue_name         => 'msggroup_queue',
                            enqueue_options        => enqueue_options,       
                            message_properties     => message_properties,     
                            payload                => message,               
                            msgid                  => message_handle);
                END LOOP;
            /* Commit the transaction */
                COMMIT; 
            END LOOP;
            END;

    /* 9.3. Dequeue the messages as groups */
            DECLARE
            dequeue_options     DBMS_AQ.dequeue_options_t;
            message_properties  DBMS_AQ.message_properties_t;
            message_handle      RAW(16);
            message             message_typ;
            no_messages   exception;
            end_of_group  exception;
            PRAGMA EXCEPTION_INIT (no_messages, -25228);
            PRAGMA EXCEPTION_INIT (end_of_group, -25235);

            BEGIN
            dequeue_options.wait       := DBMS_AQ.NO_WAIT;
            dequeue_options.navigation := DBMS_AQ.FIRST_MESSAGE;     
            LOOP
                BEGIN
                DBMS_AQ.DEQUEUE(queue_name   => 'msggroup_queue',
                            dequeue_options    => dequeue_options,
                            message_properties => message_properties,
                            payload            => message,
                            msgid              => message_handle);

                DBMS_OUTPUT.PUT_LINE ('Message: ' || message.subject || ' ... ' || message.text );

                dequeue_options.navigation := DBMS_AQ.NEXT_MESSAGE;
                EXCEPTION
                WHEN end_of_group THEN
                    DBMS_OUTPUT.PUT_LINE ('Finished processing a group of messages');
                    COMMIT;
                    dequeue_options.navigation := DBMS_AQ.NEXT_TRANSACTION;
                END;
            END LOOP;
            EXCEPTION
                WHEN no_messages THEN
                DBMS_OUTPUT.PUT_LINE ('No more messages');
            END;

/* 10. Enqueuing and Dequeuing Object Type Messages That Contain LOB Attributes Using PL/SQL */
    /* 10.1. Create Object type */
            CREATE TYPE message AS OBJECT(
                id      NUMBER, 
                subject VARCHAR2(100), 
                data    BLOB, 
                trailer NUMBER); 
 
    /* 10.2. Create the queue table, queues and start the queue: */ 
            BEGIN 
            DBMS_AQADM.CREATE_QUEUE_TABLE( 
                queue_table        => 'aq_queuetable_object',  
                queue_payload_type => 'message'); 
            DBMS_AQADM.CREATE_QUEUE( 
                queue_name  => 'aq_queue_object', 
                queue_table =>  'aq_queuetable_object'); 
            DBMS_AQADM.START_QUEUE(queue_name => 'aq_queue_object'); 
            END;
 
    /* 10.3. Enqueue of Large data types: */
            CREATE OR REPLACE PROCEDURE blobenqueue(msgno IN NUMBER) AS  
                enq_userdata message; 
                enq_msgid    RAW(16); 
                enqopt       DBMS_AQ.enqueue_options_t; 
                msgprop      DBMS_AQ.message_properties_t;
                lob_loc      BLOB; 
                buffer       RAW(4096); 
            
            BEGIN 
            buffer := HEXTORAW(RPAD('FF', 4096, 'FF')); 
            enq_userdata := message(msgno, 'Large Lob data', EMPTY_BLOB(), msgno); 
            DBMS_AQ.ENQUEUE('aq_queue_object', enqopt, msgprop, enq_userdata, enq_msgid); 
            /*select the lob locator for the queue table */
            SELECT t.user_data.data INTO lob_loc FROM aq_queuetable_object t WHERE t.msgid = enq_msgid; 
            
            DBMS_LOB.WRITE(lob_loc, 2000, 1, buffer ); 
            COMMIT; 
            END; 
            
    /* 10.4. Dequeue lob data: */ 
 
            CREATE OR REPLACE PROCEDURE blobdequeue AS  
                dequeue_options    DBMS_AQ.dequeue_options_t; 
                message_properties      DBMS_AQ.message_properties_t;
                mid                RAW(16); 
                pload              message; 
                lob_loc            BLOB; 
                amount             BINARY_INTEGER; 
                buffer             RAW(4096); 
            
            BEGIN 
            DBMS_AQ.DEQUEUE('aq_queue_object', dequeue_options, message_properties, pload, mid); 
            lob_loc := pload.data;   
                
            /* read the lob data info buffer */
            amount := 2000; 
            DBMS_LOB.READ(lob_loc, amount, 1, buffer);   
            DBMS_OUTPUT.PUT_LINE('Amount of data read: '||amount); 
            COMMIT;   
            END;   
 
    /* 10.5. Do the enqueues and dequeues: */ 
            SET SERVEROUTPUT ON 
            BEGIN 
            FOR i IN 1..5 LOOP 
                blobenqueue(i); 
            END LOOP; 
            END; 
            
            BEGIN 
            FOR i IN 1..5 LOOP 
                blobdequeue(); 
            END LOOP; 
            END;  

/* --------------Enqueue of Messages for remote subscribers/recipients to a Multiconsumer Queue and Propagation Scheduling----------------*/

/* 1. Add subscribers RED and GREEN with different addresses  to the suscriber list */
        DECLARE
        subscriber sys.aq$_agent;
        BEGIN
            /* Add subscriber RED that will dequeue messages from another_msg_queue queue in the same datatbase */
                subscriber := sys.aq$_agent('RED11', 'another_msg_queue', NULL);
                DBMS_AQADM.ADD_SUBSCRIBER(queue_name => 'AQ_QUEUE_MULTICONSUMER',
                subscriber => subscriber);

            /* Schedule propagation from AQ_QUEUE_MULTICONSUMER to other queues in the same database: */
                DBMS_AQADM.SCHEDULE_PROPAGATION(queue_name => 'AQ_QUEUE_MULTICONSUMER');

            /* Add subscriber GREEN that will dequeue messages from the msg_queue queue in another database reached by the database link another_db.world */
                subscriber := sys.aq$_agent('GREEN1', 'AQ_QUEUE_MULTICONSUMER@another_db.world', NULL);
                DBMS_AQADM.ADD_SUBSCRIBER(queue_name => 'AQ_QUEUE_MULTICONSUMER', subscriber => subscriber); 

            /* Schedule propagation from AQ_QUEUE_MULTICONSUMER to other queues in the database ""another_database"": */
                DBMS_AQADM.SCHEDULE_PROPAGATION(queue_name => 'AQ_QUEUE_MULTICONSUMER', destination  => 'another_db.world');
        END;

/* 2. ENQUEUE FOR Propagation */
        DECLARE
            enqueue_options     DBMS_AQ.enqueue_options_t;
            message_properties  DBMS_AQ.message_properties_t;
            recipients          DBMS_AQ.aq$_recipient_list_t;
            message_handle      RAW(16);
            message             message_typ;

        BEGIN
            message := message_typ('MESSAGE 1','This message is queued for queue subscribers.');
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE_MULTICONSUMER',
                enqueue_options    => enqueue_options,
                message_properties => message_properties,
                payload            => message,
                msgid              => message_handle);

            /* Enqueue MESSAGE 2 for specified recipients i.e. for RED at address another_msg_queue and BLUE.*/
            message := message_typ('MESSAGE 2','This message is queued for two recipients.'); 
            recipients(1) := sys.aq$_agent('RED', 'another_msg_queue', NULL); 
            recipients(2) := sys.aq$_agent('BLUE', NULL, NULL);
            message_properties.recipient_list := recipients;
            DBMS_AQ.ENQUEUE(queue_name => 'AQ_QUEUE_MULTICONSUMER',
                    enqueue_options    => enqueue_options,
                    message_properties => message_properties,
                    payload            => message, 
                    msgid              => message_handle);
        COMMIT;
        END;
        
/* 3. Managing Propagation From One Queue To Other Queues In The Same Database Using PL/SQL*/
    /* 3.1. Schedule propagation from queue q1def to other queues in the same database */
                EXECUTE DBMS_AQADM.SCHEDULE_PROPAGATION(queue_name => 'AQ_QUEUE_MULTICONSUMER'); 
    
    /* 3.2. Disable propagation from queue q1def to other queues in the same  database */
                EXECUTE DBMS_AQADM.DISABLE_PROPAGATION_SCHEDULE(queue_name => 'AQ_QUEUE_MULTICONSUMER'); 
    
    /* 3.3 Alter schedule from queue q1def to other queues in the same database */
                BEGIN 
                    DBMS_AQADM.ALTER_PROPAGATION_SCHEDULE(
                    queue_name => 'AQ_QUEUE_MULTICONSUMER',  
                    duration   => '2000',
                    next_time  => 'SYSDATE + 3600/86400', 
                    latency    => '32'); 
                END;
    /* 3.4. Enable propagation from queue q1def to other queues in the same database */
                EXECUTE DBMS_AQADM.ENABLE_PROPAGATION_SCHEDULE(queue_name => 'AQ_QUEUE_MULTICONSUMER'); 

    /* 3.5. Unschedule propagation from queue q1def to other queues in the same database */
            EXECUTE DBMS_AQADM.UNSCHEDULE_PROPAGATION(queue_name => 'AQ_QUEUE_MULTICONSUMER'); 

/* 4. Cleans up */
    /* 4.1. Cleans up all objects related to the object type */
            EXECUTE DBMS_AQADM.STOP_QUEUE ( queue_name => 'objType_classicQueue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE ( queue_name => 'objType_classicQueue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE_TABLE (queue_table => 'objType_classicQueue');

    /* 4.2. Cleans up all objects related to the RAW type: */
            EXECUTE DBMS_AQADM.STOP_QUEUE ( queue_name      => 'rawType_classicQueue');   
            EXECUTE DBMS_AQADM.DROP_QUEUE ( queue_name      => 'rawType_classicQueue');   
            EXECUTE DBMS_AQADM.DROP_QUEUE_TABLE (queue_table => 'rawType_classicQueueTable'); 

    /* 4.3. Cleans up all objects related to the priority queue: */
            EXECUTE DBMS_AQADM.STOP_QUEUE ( queue_name     => 'priority_msg_queue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE ( queue_name     => 'priority_msg_queue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE_TABLE ( queue_table   => 'priority_msg'); 

    /* 4.4. Cleans up all objects related to the multiple-consumer queue: */
            EXECUTE DBMS_AQADM.STOP_QUEUE ( queue_name  => 'multiconsumer_classicQueue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE ( queue_name  => 'multiconsumer_classicQueue');  
            EXECUTE DBMS_AQADM.DROP_QUEUE_TABLE ( queue_table => 'multiconsumer_classicQueueTable');

    /* 4.5. Clean up object type */
            DROP TYPE message_typ;